import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart'; // Import shared_preferences
import 'mainorg.dart'; // 親Widgetのコールバック関数の型定義がある場所

class FixedThirdSection extends StatelessWidget {
  final List<dynamic> dataList;
  final List<Map<String, dynamic>> stockdata;
  final String storageKey;
  final List<Map<String, dynamic>> savedData;
  final OnDeleteItemCallback onDeleteItem; // コールバックを受け取る
  final OnEditItemCallback onEditItem; // 編集用のコールバックを受け取る

  const FixedThirdSection({
    super.key,
    required this.dataList,
    required this.stockdata,
    required this.storageKey,
    required this.savedData,
    required this.onDeleteItem, // コンストラクタに追加
    required this.onEditItem, // コンストラクタに追加
  });

  @override
  Widget build(BuildContext context) {
    final remaining = dataList.skip(2).toList();
    if (remaining.isEmpty) {
      return const Padding(
        padding: EdgeInsets.all(16.0),
        child: Text("残りのデータはありません"),
      );
    }

    return Expanded(
      child: LayoutBuilder(
        builder: (BuildContext context, BoxConstraints constraints) {
          final screenWidth = MediaQuery.of(context).size.width;
          double fontSize = screenWidth * 0.0083; // 画面幅の 4% をフォントサイズとする例
          int crossAxisCount;
          if (constraints.maxWidth < 600) {
            crossAxisCount = 3;
          } else if (constraints.maxWidth < 900) {
            crossAxisCount = 4;
          } else {
            crossAxisCount = 5;
          }
          return Column(
            children: [
              Expanded(
                child: GridView.builder(
                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: crossAxisCount, // 動的に列数を設定
                    childAspectRatio: 1.5,
                    crossAxisSpacing: 8.0,
                    mainAxisSpacing: 8.0,
                  ),
                  itemCount: remaining.length,
                  itemBuilder: (BuildContext context, int index) {
                    final stock = remaining[index] as Map<String, dynamic>;
                    // stockdata のインデックスを調整してアクセス
                    final stock1 = stockdata[index];

                    final shares = stock1['Shares'] ?? 0;
                    final unitPrice = stock1['Unitprice'] ?? 0;
                    final purchaseValue = shares * unitPrice;

                    final marketCapString = (stock['price']?.toString() ??
                            '0.0')
                        .replaceAll(',', '');
                    final marketCapValue =
                        (double.tryParse(marketCapString) ?? 0.0) * shares;

                    final difference = marketCapValue - purchaseValue;
                    final formattedDifference = NumberFormat(
                      '#,###.##',
                    ).format(difference.abs());
                    final differenceSign = difference >= 0 ? '' : '-';

                    return Card(
                      color:
                          stock["ratio"].startsWith('+')
                              ? Colors.red
                              : Colors.green,
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: <Widget>[
                            Text(
                              'Code: ${stock['code']?.toString() ?? 'コードなし'}',
                              style: TextStyle(
                                fontSize: fontSize,
                                fontWeight: FontWeight.bold,
                              ),
                            ),

                            Text(
                              'Name: ${stock['name']?.toString() ?? '名称なし'}',
                              style: TextStyle(fontSize: fontSize),
                            ), // 画面幅の 4% をフォントサイズとする例),),

                            Text(
                              'Price: ￥${stock['price']?.toString() ?? '価格なし'}',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Ratio: ${stock['ratio']?.toString() ?? 'Ratio not found'}',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Percent: ${stock['percent']?.toString() ?? 'Percent not found'}%',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Shares: ${stock1['Shares']?.toString()}  Unit Price: ￥${stock1['Unitprice']?.toString()}',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Purchase: ￥${NumberFormat('#,###.##').format(purchaseValue)}',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Market Cap: ￥${NumberFormat('#,###.##').format(marketCapValue)}',
                              style: TextStyle(fontSize: fontSize),
                            ),

                            Text(
                              'Difference: $differenceSign￥$formattedDifference',
                              style: TextStyle(
                                color:
                                    difference >= 0
                                        ? const Color.fromARGB(
                                          255,
                                          255,
                                          255,
                                          255,
                                        )
                                        : const Color.fromARGB(235, 0, 0, 0),
                                fontSize: fontSize,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const Spacer(),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: [
                                // FixedThirdSection の build メソッド内
                                IconButton(
                                  icon: const Icon(Icons.edit),
                                  onPressed: () {
                                    onEditItem(index); // 親ウィジットのコールバック関数を呼び出す
                                  },
                                ),
                                IconButton(
                                  icon: const Icon(Icons.delete),
                                  color: Colors.red,
                                  onPressed: () => onDeleteItem(index),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}
